/*
 *        Name: NORDAUTO EXEC
 *        Date: 2014-Dec-10 (Wed)
 *
 * Fixed addresses ...
 *       1B0 -- boot disk (system disk)
 *       1B1 -- root disk (per-server storage)
 *       340 -- NIC (QDIO with layer 2)
 */

/* set some needed variables */
baseurl = "http://148.100.88.27/nord"
kfile = "image"
rfile = "ramdisk.gz"
check = "nordauto.exec curl.rexx"

mycl = "I"
raddr = "00C"
paddr = "00D"
bparm = "dasd=1b0-1b3,91b0-91b3 root=/dev/ram0 ro init=/sbin/nordinst.sh"
naddr = "340"

/* check that we have a NIC at the expected I/O address */
Parse Value DiagRC(08,'Q V NIC' naddr) With 1 rc 10 . 17 rs '15'x .
If rc = 40 Then Do
  Say "# you need a NIC at" naddr
  Say "# Define it with 'CP DEF NIC" naddr "TYPE QDIO'"
  Say "# and then 'CP COUPLE' it to the appropriate VSwitch."
End
If rc /= 0 Then Exit rc

Parse Value Diag(08,'QUERY USERID') With vmid . node . '15'x .

/* load per-server variables */
'pipe state' vmid 'nordauto *'
If rc /= 0 Then Do
  Say "# you need a" vmid "NORDAUTO file for boot parameters"
  Say "# Create it with XEDIT or upload from another system."
End
If rc /= 0 Then Exit rc
Say "# reading" vmid "NORDAUTO for boot parameters"
'pipe <' vmid 'nordauto | join * / / | var nordparms'
bparm = bparm nordparms

/* check CMS support files for consistency */
Do While check /= ""
  Parse Var check cfile check
  'pipe curl --text' baseurl || "/" || cfile '| strip | stem c0.'
  Parse Upper Var cfile fn "." ft
  'pipe <' fn ft '| strip | stem c1.'
  If c1.0 /= c0.0 Then Do
    Say "# CMS support file" fn ft "mismatch; continuing ..."
    Iterate
  End
  Do i = 1 to c0.0
    If c1.i = c0.i Then Iterate
    Say "# CMS support file" fn ft "mismatch; continuing ..."
    Leave
  End
End

/* query current reader and punch settings */
Parse Value Diag(08,'Q V' raddr) ,
  With . . . rcl rcont rhold . '15'x . . . rkeep .
Parse Value Diag(08,'Q V' paddr) ,
  With . . . pcl pcont phold . ,
  '15'x . tofor ptarg . '15'x . '15'x . . . . pkeep .

/* set reader and punch to CLASS I for IPL */
'CP SP' raddr 'CL' mycl 'NOCONT NOHOLD NOKEEP'
'CP SP' paddr 'CL' mycl 'NOCONT NOHOLD NOKEEP TO' Userid()

/* pull the kernel directly to spool space */
Say "# fetching kernel and punching it"
Say "+" 'pipe curl --binary .../' || kfile '| fblock 80 00 | punch'
        'pipe curl --binary' baseurl || "/" || kfile '| fblock 80 00 | punch' ,
          '| count bytes | var kbytes'
Call Diag 08, 'CLOSE' paddr
If rc /= 0 Then Do
  Call Diag 08, 'SP' raddr 'CL' rcl rcont rhold rkeep
  Call Diag 08, 'SP' paddr 'CL' pcl pcont phold pkeep tofor ptarg
  Exit rc
End

/* punch a boot parm line */
Say "# punching boot parm line"
Say "+" 'pipe var bparm | fblock 80 00 | punch'
        'pipe var bparm | fblock 80 00 | punch' ,
          '| count bytes | var pbytes'
Call Diag 08, 'CLOSE' paddr
If rc /= 0 Then Do
  Call Diag 08, 'SP' raddr 'CL' rcl rcont rhold rkeep
  Call Diag 08, 'SP' paddr 'CL' pcl pcont phold pkeep tofor ptarg
  Exit rc
End

/* pull the root FS directly to spool space */
Say "# fetching root FS and punching it"
Say "+" 'pipe curl --binary .../' || rfile '| fblock 80 00 | punch'
        'pipe curl --binary' baseurl || "/" || rfile '| fblock 80 00 | punch' ,
          '| count bytes | var rbytes'
Call Diag 08, 'CLOSE' paddr
If rc /= 0 Then Do
  Call Diag 08, 'SP' raddr 'CL' rcl rcont rhold rkeep
  Call Diag 08, 'SP' paddr 'CL' pcl pcont phold pkeep tofor ptarg
  Exit rc
End

Say "#" kbytes "bytes kernel," pbytes "bytes parm data," rbytes "bytes root FS"
Say "# booting kernel now ..."
Say "+" 'IPL' raddr 'CLEAR'
        'IPL' raddr 'CLEAR' ; _rc = rc


/* if somehow the IPL failed then restore reader and punch settings */
'CP SP' raddr 'CL' rcl rcont rhold rkeep
'CP SP' paddr 'CL' pcl pcont phold pkeep tofor ptarg

Exit _rc


